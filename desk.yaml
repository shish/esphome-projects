########
#
# Use the version in ~/Projects!
#
########

#############################################################
# Generic ESPHome stuff

substitutions:
  devicename: officedesk
  friendly_name: Office Desk
  device_description: Show Requests

esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP32
  board: m5stick-c
  platformio_options:
    upload_speed: 115200

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .localdomain

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret backup_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


#############################################################
# M5Stick hardawre stuff

output:
  - platform: ledc
    pin: 10
    inverted: true
    id: builtin_led

# internal IR Transmitter
remote_transmitter:
  - pin:
      number: GPIO9
    carrier_duty_percent: 50%
    id: internal

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15

i2c:
   - id: bus_a
     sda: GPIO21
     scl: GPIO22
     scan: True

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time


#############################################################
# Use-case specific code

globals:
  # 0 = break
  # 1 = work
  # 2 = focus
  - id: state_val
    type: int
    restore_value: no
    initial_value: '0'
  # 0 = idle
  # 1 = attention wanted
  - id: request_val
    type: bool
    restore_value: no
    initial_value: 'false'

script:
  # Whenever state_val or request_val are changed, call this to let
  # the world know (blink the LED, inform Home Assistant, etc)
  - id: update_world_based_on_state
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("roomtool", "State is: %d, request is %d", id(state_val), id(request_val));
      - if:
          condition:
            lambda: 'return id(request_val) == true;'
          then:
            - light.turn_on:
                id: led1
                effect: Request
          else:
            - if:
                condition:
                  lambda: 'return id(state_val) == 0;'
                then:
                  - light.turn_on:
                      id: led1
                      effect: Rest
                  - text_sensor.template.publish:
                      id: state
                      state: Rest
            - if:
                condition:
                  lambda: 'return id(state_val) == 1;'
                then:
                  - light.turn_on:
                      id: led1
                      effect: Work
                  - text_sensor.template.publish:
                      id: state
                      state: Work
            - if:
                condition:
                  lambda: 'return id(state_val) == 2;'
                then:
                  - light.turn_on:
                      id: led1
                      effect: Focus
                  - text_sensor.template.publish:
                      id: state
                      state: Focus

# expose "attention requested" as a Switch
switch:
  - platform: template
    id: request
    name: Request Attention
    icon: mdi:lightbulb
    lambda: 'return id(request_val) == true;'
    turn_on_action:
      - lambda: 'id(request_val) = true;'
      - script.execute: update_world_based_on_state
    turn_off_action:
      - lambda: 'id(request_val) = false;'
      - script.execute: update_world_based_on_state

# expose "current state" as a sensor
text_sensor:
  - platform: template
    id: state
    name: Room State
    icon: mdi:office-building
    lambda: |-
      if(id(state_val) == 0) return {"Break"};
      if(id(state_val) == 1) return {"Work"};
      if(id(state_val) == 2) return {"Focus"};
      return {};
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
  - platform: version
    name: "ESPHome Version"


binary_sensor:
  # Primary button acks the request if there is one; else changes room state
  - platform: gpio
    pin:
      number: GPIO37
      inverted: true
    name: Button A
    on_press:
      then:
        - if:
            condition:
              lambda: 'return id(request_val) == 1;'
            then:
              - lambda: |-
                  id(request_val) = 0;
              - script.execute: update_world_based_on_state
            else:
              - lambda: |-
                  id(state_val)++;
                  if(id(state_val) > 2) {
                    id(state_val) = 0;
                  }
              - script.execute: update_world_based_on_state

  # Secondary button on the desk box acts as if the primary button on the door
  # was pushed
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: Button B
    on_press:
      then:
        - switch.toggle: request

# internal LED
light:
  - platform: monochromatic
    output: builtin_led
    name: LED
    id: led1
    effects:
      - strobe:
          name: Rest
          colors:
            - state: False
              duration: 1000ms
            - state: False
              duration: 1000ms
      - strobe:
          name: Work
          colors:
            - state: True
              brightness: 10%
              duration: 1000ms
            - state: True
              brightness: 10%
              duration: 1000ms
      - strobe:
          name: Focus
          colors:
            - state: True
              brightness: 50%
              duration: 1000ms
            - state: True
              brightness: 50%
              duration: 1000ms
      - strobe:
          name: Request
          colors:
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 100ms
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 700ms

## AXP192 power management - must be present to initialize TFT power on
#sensor:
#  - platform: axp192
#    address: 0x34
#    i2c_id: bus_a
#    update_interval: 30s
#    battery_level:
#      name: "M5Stick Battery Level"
#      id: "m5stick_batterylevel"
#
#  - platform: wifi_signal
#    name: ${upper_devicename} WiFi Signal
#    id: wifi_dbm
#  - platform: uptime
#    name: ${upper_devicename} Uptime

#font:
#  - file: 'arial.ttf'
#    id: font1
#    size: 8
#
#  - file: 'arial.ttf'
#    id: font2
#    size: 36
#
#  - file: 'arial.ttf'
#    id: font3
#    size: 14

# builtin 80x160 TFT
#display:
#  - platform: st7735
#    cs_pin: GPIO5
#    dc_pin: GPIO23
#    reset_pin: GPIO18
#    rotation: 270
#    lambda: |-
#      it.print(80, 0, id(font1), ST77XX_WHITE, TextAlign::TOP_CENTER, "M5Stick Test");
#      if (id(wifi_dbm).has_state()) {
#        char str[128];
#        sprintf(str, "%.0f dBm", id(wifi_dbm).state);
#        it.print(80, 40, id(font2), ST77XX_RED, TextAlign::CENTER, str);
#        //it.print(80, 40, id(font2), ST77XX_RED, TextAlign::CENTER,  "%.0f dBm", id(wifi_dbm).state);
#      } else {
#        it.print(80, 40, id(font2), ST77XX_RED, TextAlign::CENTER, "No Wifi");
#      }
#      // Print time in HH:MM format
#      it.strftime(80, 60, id(font3), ST77XX_BLUE, TextAlign::TOP_CENTER, "%H:%M", id(sntp_time).now());
