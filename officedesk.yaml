#############################################################
# Generic ESPHome stuff

substitutions:
  devicename: officedesk
  friendly_name: Office Desk
  device_description: Show Requests

esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP32
  board: m5stick-c
  platformio_options:
    upload_speed: 115200

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .localdomain

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret backup_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true

#############################################################
# M5Stick hardware stuff

external_components:
  !include common/m5-external.yaml

spi:
  !include common/m5-spi.yaml

output:
  - !include common/m5-led.yaml

i2c:
   - !include common/m5-i2c.yaml

time:
  - !include common/time/homeassistant.yaml
  - !include common/time/sntp.yaml

sensor:
  - !include common/sensor/wifi_signal.yaml
  - !include common/sensor/uptime.yaml
  - !include common/sensor/axp192.yaml


#############################################################
# Use-case specific code

globals:
  # 0 = break
  # 1 = work
  # 2 = focus
  - id: state_val
    type: int
    restore_value: no
    initial_value: '0'
  # 0 = idle
  # 1 = attention wanted
  - id: request_val
    type: bool
    restore_value: no
    initial_value: 'false'

script:
  # Whenever state_val or request_val are changed, call this to let
  # the world know (blink the LED, inform Home Assistant, etc)
  - id: update_world_based_on_state
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("roomtool", "State is: %d, request is %d", id(state_val), id(request_val));
      - if:
          condition:
            lambda: 'return id(request_val) == true;'
          then:
            - light.turn_on:
                id: led1
                effect: Request
          else:
            - if:
                condition:
                  lambda: 'return id(state_val) == 0;'
                then:
                  - light.turn_on:
                      id: led1
                      effect: Rest
                  - text_sensor.template.publish:
                      id: state
                      state: Rest
            - if:
                condition:
                  lambda: 'return id(state_val) == 1;'
                then:
                  - light.turn_on:
                      id: led1
                      effect: Work
                  - text_sensor.template.publish:
                      id: state
                      state: Work
            - if:
                condition:
                  lambda: 'return id(state_val) == 2;'
                then:
                  - light.turn_on:
                      id: led1
                      effect: Focus
                  - text_sensor.template.publish:
                      id: state
                      state: Focus

# expose "attention requested" as a Switch
switch:
  - platform: template
    id: request
    name: Request Attention
    icon: mdi:lightbulb
    lambda: 'return id(request_val) == true;'
    turn_on_action:
      - lambda: 'id(request_val) = true;'
      - script.execute: update_world_based_on_state
    turn_off_action:
      - lambda: 'id(request_val) = false;'
      - script.execute: update_world_based_on_state

# expose "current state" as a sensor
text_sensor:
  - platform: template
    id: state
    name: Room State
    icon: mdi:office-building
    lambda: |-
      if(id(state_val) == 0) return {"Rest"};
      if(id(state_val) == 1) return {"Work"};
      if(id(state_val) == 2) return {"Focus"};
      return {};
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
  - platform: version
    name: "ESPHome Version"

binary_sensor:
  # Primary button acks the request if there is one; else changes room state
  - platform: gpio
    pin:
      number: GPIO37
      inverted: true
    id: ${devicename}_button_a
    name: ${friendly_name} Button A
    on_press:
      then:
        - if:
            condition:
              lambda: 'return id(request_val) == 1;'
            then:
              - lambda: |-
                  id(request_val) = 0;
              - script.execute: update_world_based_on_state
            else:
              - lambda: |-
                  id(state_val)++;
                  if(id(state_val) > 2) {
                    id(state_val) = 0;
                  }
              - script.execute: update_world_based_on_state

  # Secondary button on the desk box acts as if the primary button on the door
  # was pushed
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    id: ${devicename}_button_b
    name: ${friendly_name} Button B
    on_press:
      then:
        - switch.toggle: request

  # A virtual sensor which tracks the state of the door button
  - platform: homeassistant
    id: door_button_monitor
    entity_id: binary_sensor.office_door_button_a
    on_state:
      then:
        - lambda: |-
            if(x == 1) {
              id(request_val) = true;
            }
        - script.execute: update_world_based_on_state

# internal LED
light:
  - platform: monochromatic
    output: builtin_led
    name: LED
    id: led1
    effects:
      - strobe:
          name: Rest
          colors:
            - state: False
              duration: 1000ms
            - state: False
              duration: 1000ms
      - strobe:
          name: Work
          colors:
            - state: True
              brightness: 10%
              duration: 1000ms
            - state: True
              brightness: 10%
              duration: 1000ms
      - strobe:
          name: Focus
          colors:
            - state: True
              brightness: 50%
              duration: 1000ms
            - state: True
              brightness: 50%
              duration: 1000ms
      - strobe:
          name: Request
          colors:
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 100ms
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 700ms

font:
  - file: 'helvetica.ttf'
    id: font1
    size: 8
  - file: 'helvetica.ttf'
    id: font2
    size: 24
  - file: 'helvetica.ttf'
    id: font3
    size: 14

color:
  - id: color_bg
    red: 100%
    green: 100%
    blue: 100%
  - id: color_title
    red: 100%
    green: 100%
    blue: 100%
  - id: color_rest
    red: 0%
    green: 100%
    blue: 0%
  - id: color_work
    red: 100%
    green: 100%
    blue: 0%
  - id: color_focus
    red: 100%
    green: 0%
    blue: 0%
  - id: color_time
    red: 0%
    green: 0%
    blue: 100%

# builtin 80x160 TFT
display:
  - platform: st7735
    model: INITR_MINI160X80
    cs_pin: GPIO5
    dc_pin: GPIO23
    device_width: 80
    device_height: 160
    col_start: 0
    row_start: 0
    reset_pin: GPIO18
    rotation: 270
    invert_colors: true
    use_bgr: true
    lambda: |-
      auto width = 160;
      auto height = 80;
      it.fill(COLOR_OFF);
      it.print(width/2, 5, id(font1), id(color_title), TextAlign::TOP_CENTER, "Office Status");
      if (id(state).has_state()) {
        auto state_str = id(state).state;
        if(state_str == "Rest") {
          it.print(width/2, height/2, id(font2), id(color_rest), TextAlign::CENTER, "Break");
        }
        if(state_str == "Work") {
          it.print(width/2, height/2, id(font2), id(color_work), TextAlign::CENTER, "Work");
        }
        if(state_str == "Focus") {
          it.print(width/2, height/2-10, id(font2), id(color_focus), TextAlign::CENTER, "Do not");
          it.print(width/2, height/2+10, id(font2), id(color_focus), TextAlign::CENTER, "Disturb");
        }
      }
      it.strftime(width/2, height-5, id(font3), id(color_time), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
