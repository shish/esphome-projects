#############################################################
# Generic ESPHome stuff

substitutions:
  devicename: officedoor
  friendly_name: Office Door
  device_description: Show Office Status

esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP32
  board: m5stick-c
  platformio_options:
    upload_speed: 115200

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .localdomain

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret backup_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


#############################################################
# M5Stick hardware stuff

output:
  - platform: ledc
    pin: 10
    inverted: true
    id: builtin_led

# internal IR Transmitter
remote_transmitter:
  - pin:
      number: GPIO9
    carrier_duty_percent: 50%
    id: internal

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15

i2c:
   - id: bus_a
     sda: GPIO21
     scl: GPIO22
     scan: True

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time

sensor:
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    id: wifi_dbm
  - platform: uptime
    name: ${friendly_name} Uptime
  # AXP192 power management - must be present to initialize TFT power on
  - platform: axp192
    address: 0x34
    i2c_id: bus_a
    update_interval: 30s
    battery_level:
      name: ${friendly_name} Battery Level
      id: "${devicename}_batterylevel"


#############################################################
# Use-case specific code

binary_sensor:
  # Nothing to do locally, other nodes will watch our state to
  # react to presses
  - platform: gpio
    pin:
      number: GPIO37
      inverted: true
    id: ${devicename}_button_a
    name: ${friendly_name} Button A
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    id: ${devicename}_button_b
    name: ${friendly_name} Button B

text_sensor:
  - platform: homeassistant
    id: desk_state_monitor
    entity_id: sensor.room_state
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "Setting effect to %s", x.c_str());
            auto call = id(led1).turn_on();
            call.set_effect(x.c_str());
            call.perform();
  - platform: homeassistant
    id: request_attention_monitor
    entity_id: switch.request_attention
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "Setting request to %s", x.c_str());

light:
  - platform: monochromatic
    output: builtin_led
    name: LED
    id: led1
    effects:
      - strobe:
          name: Rest
          colors:
            - state: False
              duration: 1000ms
            - state: False
              duration: 1000ms
      - strobe:
          name: Work
          colors:
            - state: True
              brightness: 50%
              duration: 1000ms
            - state: True
              brightness: 50%
              duration: 1000ms
      - strobe:
          name: Focus
          colors:
            - state: True
              brightness: 100%
              duration: 1000ms
            - state: True
              brightness: 50%
              duration: 1000ms
      - strobe:
          name: Request
          colors:
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 100ms
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 700ms

font:
  - file: 'helvetica.ttf'
    id: font1
    size: 8
  - file: 'helvetica.ttf'
    id: font2
    size: 24
  - file: 'helvetica.ttf'
    id: font3
    size: 14

# builtin 80x160 TFT
display:
  - platform: st7735
    cs_pin: GPIO5
    dc_pin: GPIO23
    reset_pin: GPIO18
    rotation: 0
    lambda: |-
      auto width = 80;
      auto height = 160;
      it.print(width/2, 5, id(font1), ST77XX_WHITE, TextAlign::TOP_CENTER, "Office Status");
      if (id(desk_state_monitor).has_state()) {
        auto state_str = id(desk_state_monitor).state;
        if(state_str == "Rest") {
          it.print(width/2, 60, id(font2), ST77XX_GREEN, TextAlign::CENTER, "Break");
        }
        if(state_str == "Work") {
          it.print(width/2, 60, id(font2), ST77XX_YELLOW, TextAlign::CENTER, "Work");
        }
        if(state_str == "Focus") {
          it.print(width/2, 50, id(font2), ST77XX_RED, TextAlign::CENTER, "Do not");
          it.print(width/2, 70, id(font2), ST77XX_RED, TextAlign::CENTER, "Disturb");
        }
      }
      if (id(request_attention_monitor).has_state() && id(request_attention_monitor).state == "on") {
          it.print(width/2, height-60, id(font2), ST77XX_YELLOW, TextAlign::CENTER, "Ringing");
      }
      it.strftime(width/2, height-5, id(font3), ST77XX_BLUE, TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
