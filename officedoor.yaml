#############################################################
# Generic ESPHome stuff

substitutions:
  devicename: officedoor
  friendly_name: Office Door
  device_description: Show Office Status

esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP32
  board: m5stick-c
  platformio_options:
    upload_speed: 115200

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .localdomain

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret backup_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true

#############################################################
# M5Stick hardware stuff

external_components:
  !include common/m5-external.yaml

spi:
  !include common/m5-spi.yaml

output:
  - !include common/m5-led.yaml

i2c:
   - !include common/m5-i2c.yaml

time:
  - !include common/time/homeassistant.yaml
  - !include common/time/sntp.yaml

sensor:
  - !include common/sensor/wifi_signal.yaml
  - !include common/sensor/uptime.yaml
  - !include common/sensor/axp192.yaml


#############################################################
# Use-case specific code

binary_sensor:
  # Nothing to do locally, other nodes will watch our state to
  # react to presses
  - platform: gpio
    pin:
      number: GPIO37
      inverted: true
    id: ${devicename}_button_a
    name: ${friendly_name} Button A
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    id: ${devicename}_button_b
    name: ${friendly_name} Button B

text_sensor:
  - platform: homeassistant
    id: desk_state_monitor
    entity_id: sensor.room_state
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "Setting effect to %s", x.c_str());
            auto call = id(led1).turn_on();
            call.set_effect(x.c_str());
            call.perform();
  - platform: homeassistant
    id: request_attention_monitor
    entity_id: switch.request_attention
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "Setting request to %s", x.c_str());

light:
  - platform: monochromatic
    output: builtin_led
    name: LED
    id: led1
    effects:
      - strobe:
          name: Rest
          colors:
            - state: False
              duration: 1000ms
            - state: False
              duration: 1000ms
      - strobe:
          name: Work
          colors:
            - state: True
              brightness: 50%
              duration: 1000ms
            - state: True
              brightness: 50%
              duration: 1000ms
      - strobe:
          name: Focus
          colors:
            - state: True
              brightness: 100%
              duration: 1000ms
            - state: True
              brightness: 50%
              duration: 1000ms
      - strobe:
          name: Request
          colors:
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 100ms
            - state: True
              brightness: 100%
              duration: 100ms
            - state: False
              duration: 700ms

font:
  - file: 'helvetica.ttf'
    id: font1
    size: 8
  - file: 'helvetica.ttf'
    id: font2
    size: 24
  - file: 'helvetica.ttf'
    id: font3
    size: 14

color:
  - id: color_bg
    red: 100%
    green: 100%
    blue: 100%
  - id: color_title
    red: 100%
    green: 100%
    blue: 100%
  - id: color_rest
    red: 0%
    green: 100%
    blue: 0%
  - id: color_work
    red: 100%
    green: 100%
    blue: 0%
  - id: color_focus
    red: 100%
    green: 0%
    blue: 0%
  - id: color_time
    red: 0%
    green: 0%
    blue: 100%

# builtin 80x160 TFT
display:
  - platform: st7735
    model: INITR_MINI160X80
    cs_pin: GPIO5
    dc_pin: GPIO23
    device_width: 80
    device_height: 160
    col_start: 0
    row_start: 0
    reset_pin: GPIO18
    rotation: 0
    invert_colors: true
    use_bgr: true
    lambda: |-
      auto width = 80;
      auto height = 160;
      it.fill(COLOR_OFF);
      it.print(width/2, 5, id(font1), id(color_title), TextAlign::TOP_CENTER, "Office Status");
      if (id(desk_state_monitor).has_state()) {
        auto state_str = id(desk_state_monitor).state;
        if(state_str == "Rest") {
          it.print(width/2, 60, id(font2), id(color_rest), TextAlign::CENTER, "Break");
        }
        if(state_str == "Work") {
          it.print(width/2, 60, id(font2), id(color_work), TextAlign::CENTER, "Work");
        }
        if(state_str == "Focus") {
          it.print(width/2, 50, id(font2), id(color_focus), TextAlign::CENTER, "Do not");
          it.print(width/2, 70, id(font2), id(color_focus), TextAlign::CENTER, "Disturb");
        }
      }
      if (id(request_attention_monitor).has_state() && id(request_attention_monitor).state == "on") {
          it.print(width/2, height-60, id(font2), id(color_work), TextAlign::CENTER, "Ringing");
      }
      it.strftime(width/2, height-5, id(font3), id(color_time), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
